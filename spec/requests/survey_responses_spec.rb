require 'rails_helper'
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/survey_responses", type: :request do
  let(:valid_attributes) {
    {
      from: '7128675309',
      question1: 'A first response.',
      question2: 'A second response.',
      optout: false
    }
  }

  let(:invalid_attributes) {
    {
      animal: 'bantha'
    }
  }

  let(:valid_headers) {
    {}
  }

  describe "GET /index" do
    it "renders a successful response" do
      SurveyResponse.create! valid_attributes
      get survey_responses_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      survey_response = SurveyResponse.create! valid_attributes
      get survey_response_url(survey_response), as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new SurveyResponse" do
        expect {
          post survey_responses_url,
               params: { survey_response: valid_attributes }, headers: valid_headers, as: :json
        }.to change(SurveyResponse, :count).by(1)
      end

      it "renders a JSON response with the new survey_response" do
        post survey_responses_url,
             params: { survey_response: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new SurveyResponse" do
        expect {
          post survey_responses_url,
               params: { survey_response: invalid_attributes }, as: :json
        }.to change(SurveyResponse, :count).by(0)
      end

      it "renders a JSON response with errors for the new survey_response" do
        post survey_responses_url,
             params: { survey_response: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          from: '7728675309',
          question2: 'Different response.'
        }
      }

      it "updates the requested survey_response" do
        survey_response = SurveyResponse.create! valid_attributes
        patch survey_response_url(survey_response),
              params: { survey_response: new_attributes }, headers: valid_headers, as: :json
        survey_response.reload
        skip("Add assertions for updated state")
      end

      it "renders a JSON response with the survey_response" do
        survey_response = SurveyResponse.create! valid_attributes
        patch survey_response_url(survey_response),
              params: { survey_response: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the survey_response" do
        survey_response = SurveyResponse.create! valid_attributes
        patch survey_response_url(survey_response),
              params: { survey_response: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested survey_response" do
      survey_response = SurveyResponse.create! valid_attributes
      expect {
        delete survey_response_url(survey_response), headers: valid_headers, as: :json
      }.to change(SurveyResponse, :count).by(-1)
    end
  end
end
